language: java
dist: trusty
jdk:
  - openjdk8
  - oraclejdk8
  - oraclejdk9
install: true
env:
  - optimizely_default_parser=GSON_CONFIG_PARSER
  - optimizely_default_parser=JACKSON_CONFIG_PARSER
  - optimizely_default_parser=JSON_CONFIG_PARSER
  - optimizely_default_parser=JSON_SIMPLE_CONFIG_PARSER
script:
    - "./gradlew clean"
    - "./gradlew exhaustiveTest"
    - "./gradlew build"

cache:
  gradle: true
  directories:
  - "$HOME/.gradle/caches"
  - "$HOME/.gradle/wrapper"
branches:
  only:
  - master
  - /^\d+\.\d+\.(\d|[x])+(-SNAPSHOT|-alpha|-beta)?\d*$/ # trigger builds on tags which are semantically versioned to ship the SDK.
after_success:
  - ./gradlew coveralls uploadArchives --console plain
after_failure:
  - cat /home/travis/build/optimizely/java-sdk/core-api/build/reports/findbugs/main.html
  - cat /home/travis/build/optimizely/java-sdk/core-api/build/reports/findbugs/test.html

# Integration tests need to run first to reset the PR build status to pending
stages:
  - 'Source Clear'
  - 'Lint markdown files'
  - 'Integration tests'
  - 'Full stack production tests'
  - 'Test'
  - 'Publish'
  - 'Snapshot'

jobs:
  include:
    - stage: 'Lint markdown files'
      os: linux
      language: generic
      install: gem install awesome_bot
      script:
        - find . -type f -name '*.md' -exec awesome_bot {} \;
      notifications:
        email: false

    - &integrationtest
      stage: 'Integration tests'
      merge_mode: replace
      env: SDK=java SDK_BRANCH=$TRAVIS_PULL_REQUEST_BRANCH
      cache: false
      language: minimal
      before_install: skip
      install: skip
      before_script:
        - mkdir $HOME/travisci-tools && pushd $HOME/travisci-tools && git init && git pull https://$CI_USER_TOKEN@github.com/optimizely/travisci-tools.git && popd
      script:
        - $HOME/travisci-tools/trigger-script-with-status-update.sh
      after_success: travis_terminate 0

    - <<: *integrationtest
      stage: 'Full stack production tests'
      env:
        SDK=java
        SDK_BRANCH=$TRAVIS_PULL_REQUEST_BRANCH
        FULLSTACK_TEST_REPO=ProdTesting
        
    - stage: 'Source Clear'
      if: type = cron
      install: skip
      before_script: skip
      script: skip
      after_success: skip

    - stage: 'Publish'
      if: tag IS present
      script:
        - ./gradlew ship
      after_success: skip

    - stage: 'Snapshot'
      if: env(SNAPSHOT) = true and type = api
      script:
        - TRAVIS_TAG=BB-SNAPSHOT ./gradlew ship
      after_success: skip
