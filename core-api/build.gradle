dependencies {
    implementation group: 'org.slf4j', name: 'slf4j-api', version: slf4jVersion
    implementation group: 'com.fasterxml.jackson.core', name: 'jackson-annotations', version: jacksonVersion
    implementation group: 'com.google.code.findbugs', name: 'annotations', version: findbugsAnnotationVersion
    implementation group: 'com.google.code.findbugs', name: 'jsr305', version: findbugsJsrVersion
    testImplementation group: 'junit', name: 'junit', version: junitVersion
    testImplementation group: 'ch.qos.logback', name: 'logback-classic', version: logbackVersion

    // an assortment of json parsers
    compileOnly group: 'com.google.code.gson', name: 'gson', version: gsonVersion, optional
    compileOnly group: 'org.json', name: 'json', version: jsonVersion, optional
    compileOnly group: 'com.googlecode.json-simple', name: 'json-simple', version: jsonSimpleVersion, optional
    compileOnly group: 'com.fasterxml.jackson.core', name: 'jackson-databind', version: jacksonVersion, optional
}

tasks.named('processJmhResources') {
    duplicatesStrategy = DuplicatesStrategy.WARN
}


test {
    useJUnit {
        excludeCategories 'com.optimizely.ab.categories.ExhaustiveTest'
    }
}

task exhaustiveTest(type: Test) {
    useJUnit {
        includeCategories 'com.optimizely.ab.categories.ExhaustiveTest'
    }
}


task generateVersionFile {
    // add the build version information into a file that'll go into the distribution
    ext.buildVersion = new File(projectDir, "src/main/resources/optimizely-build-version")
    buildVersion.text = version
}

build.finalizedBy(generateVersionFile)
