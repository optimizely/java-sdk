buildscript {
    repositories {
        jcenter()
        maven {
            url "https://oss.sonatype.org/content/repositories/snapshots/"
        }
    }

    dependencies {
        classpath 'com.jfrog.bintray.gradle:gradle-bintray-plugin:1.6'
    }
}

plugins {
    id 'com.github.kt3k.coveralls' version '2.8.2'
    id 'jacoco'
    id 'me.champeau.gradle.jmh' version '0.3.1'
    id 'nebula.optional-base' version '3.2.0'
}

allprojects {
    group = 'com.optimizely.ab'
    apply plugin: 'idea'
    apply plugin: 'jacoco'

    repositories {
        jcenter()
    }

    jacoco {
        toolVersion = '0.8.0'
    }
}

apply from: 'gradle/publish.gradle'

allprojects {
    def travis_defined_version = System.getenv('TRAVIS_TAG')
    if (travis_defined_version != null) {
        version = travis_defined_version
    }
}

subprojects {
    apply plugin: 'com.jfrog.bintray'
    apply plugin: 'findbugs'
    apply plugin: 'jacoco'
    apply plugin: 'java'
    apply plugin: 'maven-publish'
    apply plugin: 'me.champeau.gradle.jmh'
    apply plugin: 'nebula.optional-base'

    sourceCompatibility = 1.6
    targetCompatibility = 1.6

    repositories {
        jcenter()
    }

    task sourcesJar(type: Jar, dependsOn: classes) {
        classifier = 'sources'
        from sourceSets.main.allSource
    }

    task javadocJar(type: Jar, dependsOn: javadoc) {
        classifier = 'javadoc'
        from javadoc.destinationDir
    }

    artifacts {
        archives sourcesJar
        archives javadocJar
    }

    tasks.withType(FindBugs) {
        reports {
            xml.enabled = false
            html.enabled = true
        }
    }

    test {
        useJUnit {
            excludeCategories 'com.optimizely.ab.categories.ExhaustiveTest'
        }

        testLogging {
            showStandardStreams = false
        }
    }

    task exhaustiveTest(type: Test) {
        useJUnit {
            includeCategories 'com.optimizely.ab.categories.ExhaustiveTest'
        }
    }

    jmh {
        duplicateClassesStrategy = 'warn'
    }

    sourceSets {
        jmh.java.srcDirs += sourceSets.test.java.srcDirs
    }

    dependencies {
        afterEvaluate {
            jmh configurations.testCompile.allDependencies
        }
    }

    dependencies {
        testCompile group: 'junit', name: 'junit', version: junitVersion
        testCompile group: 'org.mockito', name: 'mockito-core', version: mockitoVersion
        testCompile group: 'org.hamcrest', name: 'hamcrest-all', version: hamcrestVersion
        testCompile group: 'com.google.guava', name: 'guava', version: guavaVersion

        // logging dependencies (logback)
        testCompile group: 'ch.qos.logback', name: 'logback-classic', version: logbackVersion
        testCompile group: 'ch.qos.logback', name: 'logback-core', version: logbackVersion

        testCompile group: 'com.google.code.gson', name: 'gson', version: gsonVersion
        testCompile group: 'org.json', name: 'json', version: jsonVersion
        testCompile group: 'com.googlecode.json-simple', name: 'json-simple', version: jsonSimpleVersion
        testCompile group: 'com.fasterxml.jackson.core', name: 'jackson-databind', version: jacksonVersion
    }

    publishing {
        publications {
            mavenJava(MavenPublication) {
                from components.java
                artifact sourcesJar
                artifact javadocJar
                pom.withXml {
                    asNode().children().last() + {
                        resolveStrategy = Closure.DELEGATE_FIRST
                        url 'https://github.com/optimizely/java-sdk'
                        licenses {
                            license {
                                name 'The Apache Software License, Version 2.0'
                                url 'http://www.apache.org/license/LICENSE-2.0.txt'
                                distribution 'repo'
                            }
                        }
                        developers {
                            developer {
                                id 'optimizely'
                                name 'Optimizely'
                                email 'developers@optimizely.com'
                            }
                        }
                    }
                }
            }
        }
    }

    def bintrayName = 'core-api';
    if (name.equals('core-httpclient-impl')) {
        bintrayName = 'httpclient'
    }

    bintray {
        user = System.getenv('BINTRAY_USER')
        key = System.getenv('BINTRAY_KEY')
        pkg {
            repo = 'optimizely'
            name = "optimizely-sdk-${bintrayName}"
            userOrg = 'optimizely'
            version {
                name = rootProject.version
            }
            publications = ['mavenJava']
        }
    }

    build.dependsOn('generatePomFileForMavenJavaPublication')

    bintrayUpload.dependsOn 'build'

    task ship() {
        dependsOn('bintrayUpload')
    }

}

task ship() {
    dependsOn(':core-api:ship', ':core-httpclient-impl:ship')
}

// Only report code coverage for projects that are distributed
def publishedProjects = subprojects.findAll { it.path != ':simulator' }

task jacocoMerge(type: JacocoMerge) {
    publishedProjects.each { subproject ->
        executionData subproject.tasks.withType(Test)
    }
    doFirst {
        executionData = files(executionData.findAll { it.exists() })
    }
}

task jacocoRootReport(type: JacocoReport, group: 'Coverage reports') {
    description = 'Generates an aggregate report from all subprojects'
    dependsOn publishedProjects.test, jacocoMerge

    additionalSourceDirs = files(publishedProjects.sourceSets.main.allSource.srcDirs)
    sourceDirectories = files(publishedProjects.sourceSets.main.allSource.srcDirs)
    classDirectories = files(publishedProjects.sourceSets.main.output)
    executionData jacocoMerge.destinationFile

    reports {
        html.enabled = true // human readable
        xml.enabled = true // required by coveralls
    }
}

coveralls {
    sourceDirs = publishedProjects.sourceSets.main.allSource.srcDirs.flatten()
    jacocoReportPath = "${buildDir}/reports/jacoco/jacocoRootReport/jacocoRootReport.xml"
}

tasks.coveralls {
    group = 'Coverage reports'
    description = 'Uploads the aggregated coverage report to Coveralls'

    dependsOn jacocoRootReport
    onlyIf { System.env.'CI' && !JavaVersion.current().isJava9Compatible() }
}
