plugins {
    id 'com.github.kt3k.coveralls' version '2.12.2'
    id 'jacoco'
    id 'me.champeau.gradle.jmh' version '0.5.3'
    id 'nebula.optional-base' version '3.2.0'
    id 'com.github.hierynomus.license' version '0.16.1'
    id 'com.github.spotbugs' version "4.5.0"
    id 'maven-publish'
}

allprojects {
    apply plugin: 'idea'
    apply plugin: 'jacoco'

    repositories {
        jcenter()
    }

    jacoco {
        toolVersion = '0.8.7'
    }
}

allprojects {
    group = 'com.optimizely.ab'

    def travis_defined_version = System.getenv('TRAVIS_TAG')
    if (travis_defined_version != null) {
        version = travis_defined_version
    }

    ext.isReleaseVersion = !version.endsWith("SNAPSHOT")
}

def publishedProjects = subprojects.findAll { it.name != 'java-quickstart' }

configure(publishedProjects) {
    apply plugin: 'com.github.spotbugs'
    apply plugin: 'jacoco'
    apply plugin: 'java'
    apply plugin: 'maven-publish'
    apply plugin: 'signing'
    apply plugin: 'me.champeau.gradle.jmh'
    apply plugin: 'nebula.optional-base'
    apply plugin: 'com.github.hierynomus.license'

    sourceCompatibility = 1.8
    targetCompatibility = 1.8

    repositories {
        jcenter()
        maven {
            url 'https://plugins.gradle.org/m2/'
        }
    }

    task sourcesJar(type: Jar, dependsOn: classes) {
        archiveClassifier.set('sources')
        from sourceSets.main.allSource
    }

    task javadocJar(type: Jar, dependsOn: javadoc) {
        archiveClassifier.set('javadoc')
        from javadoc.destinationDir
    }

    spotbugsMain {
        reports {
            xml.enabled = false
            html.enabled = true
        }
    }

    spotbugs {
        spotbugsJmh.enabled = false
    }

    test {
        testLogging {
            showStandardStreams = false
        }
    }

    jmh {
        duplicateClassesStrategy = 'warn'
    }

    sourceSets {
        jmh.java.srcDirs += sourceSets.test.java.srcDirs
    }

    dependencies {
        jmh 'org.openjdk.jmh:jmh-core:1.12'
        jmh 'org.openjdk.jmh:jmh-generator-annprocess:1.12'
    }

    dependencies {
        implementation group: 'commons-codec', name: 'commons-codec', version: commonCodecVersion

        testImplementation group: 'junit', name: 'junit', version: junitVersion
        testImplementation group: 'org.mockito', name: 'mockito-core', version: mockitoVersion
        testImplementation group: 'org.hamcrest', name: 'hamcrest-all', version: hamcrestVersion
        testImplementation group: 'com.google.guava', name: 'guava', version: guavaVersion

        // logging dependencies (logback)
        testImplementation group: 'ch.qos.logback', name: 'logback-classic', version: logbackVersion
        testImplementation group: 'ch.qos.logback', name: 'logback-core', version: logbackVersion

        testImplementation group: 'com.google.code.gson', name: 'gson', version: gsonVersion
        testImplementation group: 'org.json', name: 'json', version: jsonVersion
        testImplementation group: 'com.googlecode.json-simple', name: 'json-simple', version: jsonSimpleVersion
        testImplementation group: 'com.fasterxml.jackson.core', name: 'jackson-databind', version: jacksonVersion
    }

    configurations.all {
        resolutionStrategy {
            force "junit:junit:${junitVersion}"
        }
    }


    def docTitle = "Optimizely Java SDK"
    if (name.equals('core-httpclient-impl')) {
        docTitle = "Optimizely Java SDK: Httpclient"
    }

    afterEvaluate {
        publishing {
            publications {
                release(MavenPublication) {
                    customizePom(pom, docTitle)

                    from components.java
                    artifact sourcesJar
                    artifact javadocJar
                }
            }
            repositories {
                maven {
                    def releaseUrl = "https://oss.sonatype.org/service/local/staging/deploy/maven2"
                    def snapshotUrl = "https://oss.sonatype.org/content/repositories/snapshots"
                    url = isReleaseVersion ? releaseUrl : snapshotUrl
                    credentials {
                        username System.getenv('MAVEN_CENTRAL_USERNAME')
                        password System.getenv('MAVEN_CENTRAL_PASSWORD')
                    }
                }
            }
        }

        signing {
            // base64 for workaround travis escape chars issue
            def signingKeyBase64 = System.getenv('MAVEN_SIGNING_KEY_BASE64')
            // skip signing for "local" version into MavenLocal for test-app
            if (!signingKeyBase64?.trim()) return
            byte[] decoded = signingKeyBase64.decodeBase64()
            def signingKey = new String(decoded)

            def signingPassword = System.getenv('MAVEN_SIGNING_PASSPHRASE')
            useInMemoryPgpKeys(signingKey, signingPassword)
            sign publishing.publications.release
        }
    }

    license {
        header = rootProject.file("resources/HEADER")
        skipExistingHeaders = true
        include "**/*.java"
        ext.author = "Optimizely"
        ext.year = Calendar.getInstance().get(Calendar.YEAR)
    }

    task ship() {
        dependsOn('publish')
    }

    // concurrent publishing (maven-publish) causes an issue with maven-central repository
    // - a single module splits into multiple staging repos, so validation fails.
    // - adding this ordering requirement forces sequential publishing processes.
    project(':core-api').javadocJar.mustRunAfter = [':core-httpclient-impl:ship']
}

task ship() {
    dependsOn(':core-api:ship', ':core-httpclient-impl:ship')
}

task jacocoMerge(type: JacocoMerge) {
    publishedProjects.each { subproject ->
        executionData subproject.tasks.withType(Test)
    }
    doFirst {
        executionData = files(executionData.findAll { it.exists() })
    }
}

task jacocoRootReport(type: JacocoReport, group: 'Coverage reports') {
    description = 'Generates an aggregate report from all subprojects'
    dependsOn publishedProjects.test, jacocoMerge

    getAdditionalSourceDirs().setFrom(files(publishedProjects.sourceSets.main.allSource.srcDirs))
    getSourceDirectories().setFrom(files(publishedProjects.sourceSets.main.allSource.srcDirs))
    getAdditionalClassDirs().setFrom(files(publishedProjects.sourceSets.main.output))
    executionData jacocoMerge.destinationFile

    reports {
        html.enabled = true // human readable
        xml.enabled = true // required by coveralls
    }
}

coveralls {
    sourceDirs = publishedProjects.sourceSets.main.allSource.srcDirs.flatten()
    jacocoReportPath = "${buildDir}/reports/jacoco/jacocoRootReport/jacocoRootReport.xml"
}

tasks.coveralls {
    group = 'Coverage reports'
    description = 'Uploads the aggregated coverage report to Coveralls'

    dependsOn jacocoRootReport
    onlyIf { System.env.'CI' && !JavaVersion.current().isJava9Compatible() }
}

// standard POM format required by MavenCentral

def customizePom(pom, title) {
    pom.withXml {
        asNode().children().last() + {
            // keep this - otherwise some properties are not made into pom properly
            resolveStrategy = Closure.DELEGATE_FIRST

            name title
            url 'https://github.com/optimizely/java-sdk'
            description 'The Java SDK for Optimizely Feature Experimentation, Optimizely Full Stack (legacy), and Optimizely Rollouts'
            licenses {
                license {
                    name 'The Apache Software License, Version 2.0'
                    url 'http://www.apache.org/licenses/LICENSE-2.0.txt'
                    distribution 'repo'
                }
            }
            developers {
                developer {
                    id 'optimizely'
                    name 'Optimizely'
                    email 'optimizely-fullstack@optimizely.com'
                }
            }
            scm {
                connection 'scm:git:git://github.com/optimizely/java-sdk.git'
                developerConnection 'scm:git:ssh:github.com/optimizely/java-sdk.git'
                url 'https://github.com/optimizely/java-sdk.git'
            }
        }
    }
}
