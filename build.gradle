plugins {
    id 'com.github.kt3k.coveralls' version '2.12.2'
    id 'jacoco'
    id 'me.champeau.gradle.jmh' version '0.5.3'
    id 'nebula.optional-base' version '3.1.0'
    id 'com.github.hierynomus.license' version '0.16.1'
    id 'com.github.spotbugs' version "6.0.14"
    id 'maven-publish'
    id 'io.github.gradle-nexus.publish-plugin' version '2.0.0'
}

nexusPublishing {
    repositories {
        sonatype {
            nexusUrl.set(uri("https://ossrh-staging-api.central.sonatype.com/service/local/"))
            snapshotRepositoryUrl.set(uri("https://central.sonatype.com/repository/maven-snapshots/"))
            username = System.getenv('MAVEN_CENTRAL_USERNAME')
            password = System.getenv('MAVEN_CENTRAL_PASSWORD')
        }
    }
}

// Single block: set version & release flag once (env override optional)
def envVersion = System.getenv('GITHUB_TAG')
if (envVersion && envVersion.trim()) {
    version = envVersion.trim()
}
ext.isReleaseVersion = !version.endsWith('SNAPSHOT')

allprojects {
    group = 'com.optimizely.ab'
    apply plugin: 'idea'
    apply plugin: 'jacoco'
    repositories { mavenCentral() }
    jacoco { toolVersion = '0.8.7' }
}

def publishedProjects = subprojects.findAll { it.name != 'java-quickstart' }

configure(publishedProjects) {
    apply plugin: 'com.github.spotbugs'
    apply plugin: 'java'
    apply plugin: 'maven-publish'
    apply plugin: 'signing'
    apply plugin: 'me.champeau.gradle.jmh'
    apply plugin: 'nebula.optional-base'
    apply plugin: 'com.github.hierynomus.license'

    sourceCompatibility = 1.8
    targetCompatibility = 1.8

    // Needed only for plugin portal deps
    repositories { maven { url 'https://plugins.gradle.org/m2/' } }

    task sourcesJar(type: Jar, dependsOn: classes) {
        archiveClassifier.set('sources')
        from sourceSets.main.allSource
    }
    task javadocJar(type: Jar, dependsOn: javadoc) {
        archiveClassifier.set('javadoc')
        from javadoc.destinationDir
    }

    spotbugsMain {
        reports { xml.enabled = false; html.enabled = true }
    }
    spotbugs {
        spotbugsJmh.enabled = false
        reportLevel = com.github.spotbugs.snom.Confidence.valueOf('HIGH')
    }

    jmh { duplicateClassesStrategy = 'warn' }
    sourceSets { jmh.java.srcDirs += sourceSets.test.java.srcDirs }

    dependencies {
        jmh 'org.openjdk.jmh:jmh-core:1.12'
        jmh 'org.openjdk.jmh:jmh-generator-annprocess:1.12'
    }

    configurations.all {
        resolutionStrategy {
            force "junit:junit:${junitVersion}"
            force 'com.netflix.nebula:nebula-gradle-interop:2.2.2'
        }
    }

    def docTitle = (name == 'core-httpclient-impl') ?
        "Optimizely Java SDK: Httpclient" :
        "Optimizely Java SDK"

    afterEvaluate {
        publishing {
            publications {
                create('release', MavenPublication) {
                    customizePom(pom, docTitle)
                    from components.java
                    artifact sourcesJar
                    artifact javadocJar
                }
            }
            // Repositories omitted – nexus-publish plugin manages them
        }

        signing {
            // Sign only release (non-SNAPSHOT) and only if key present
            if (!rootProject.isReleaseVersion) return
            def keyB64 = System.getenv('MAVEN_SIGNING_KEY_BASE64')
            if (!keyB64?.trim()) return
            def pass = System.getenv('MAVEN_SIGNING_PASSPHRASE')
            useInMemoryPgpKeys(new String(keyB64.decodeBase64()), pass)
            sign publishing.publications.release
        }
    }

    license {
        header = rootProject.file("resources/HEADER")
        skipExistingHeaders = true
        include "**/*.java"
        ext.author = "Optimizely"
        ext.year = Calendar.getInstance().get(Calendar.YEAR)
    }
}

// Root ship task (nexus publish plugin)
// For snapshots: publishToSonatype only (appears in snapshot repo)
// For releases: publish then close+release to promote
tasks.register('ship') {
    dependsOn 'publishToSonatype'
    if (isReleaseVersion) {
        finalizedBy 'closeAndReleaseSonatypeStagingRepository'
    }
}

// Remove per‑module ship tasks & cross-project mustRunAfter (they caused config errors)

// Jacoco + Coveralls tasks unchanged below ...

// (keep your existing jacocoMerge, jacocoRootReport, coveralls, customizePom definitions)
